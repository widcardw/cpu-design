$date
	Sat Sep 11 16:14:03 2021
$end
$version
	Icarus Verilog
$end
$timescale
	10ns
$end
$scope module testbench $end
$var wire 32 ! Instruction [31:0] $end
$var reg 1 " Branch $end
$var reg 1 # Clk $end
$var reg 1 $ Jump $end
$var reg 1 % Run $end
$var reg 1 & Zero $end
$scope module IF $end
$var wire 1 " Branch $end
$var wire 1 # Clk $end
$var wire 1 $ Jump $end
$var wire 1 % Run $end
$var wire 1 & Zero $end
$var wire 30 ' PC_1_Ext [29:0] $end
$var wire 30 ( PC_1 [29:0] $end
$var wire 30 ) Newpc [29:0] $end
$var wire 30 * JumpIn [29:0] $end
$var wire 32 + Instruction [31:0] $end
$var wire 30 , ImmExt [29:0] $end
$var wire 30 - BranchResult [29:0] $end
$var reg 30 . PC [29:0] $end
$scope module mem $end
$var wire 32 / addr [31:0] $end
$var wire 32 0 Instruction [31:0] $end
$upscope $end
$scope module mux1 $end
$var wire 1 1 Selm $end
$var wire 30 2 V [29:0] $end
$var wire 30 3 W [29:0] $end
$var reg 30 4 F [29:0] $end
$upscope $end
$scope module mux2 $end
$var wire 1 $ Selm $end
$var wire 30 5 V [29:0] $end
$var wire 30 6 W [29:0] $end
$var reg 30 7 F [29:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1 7
b1111010100011000000001010 6
b1 5
b1 4
b11000000001011 3
b1 2
01
b1111010100011000000001010 0
b0 /
b0 .
b1 -
b11000000001010 ,
b1111010100011000000001010 +
b1111010100011000000001010 *
b1 )
b1 (
b11000000001011 '
0&
0%
0$
0#
0"
b1111010100011000000001010 !
$end
#10
1#
1%
#20
b10 )
b10 7
b10 -
b10 4
b10 5
b1110010110010100000000000 *
b1110010110010100000000000 6
b10100000000000 ,
b10100000000010 '
b10100000000010 3
b10 (
b10 2
b110101110010110010100000000000 !
b110101110010110010100000000000 +
b110101110010110010100000000000 0
b100 /
b1 .
0#
#30
1#
#40
b11 )
b11 7
b11 -
b11 4
b11 5
b1111000010000000000000011 *
b1111000010000000000000011 6
b11 ,
b110 '
b110 3
b11 (
b11 2
b10001111000010000000000000011 !
b10001111000010000000000000011 +
b10001111000010000000000000011 0
b1000 /
b10 .
0#
#50
1#
#59
b110 )
b110 7
b110 -
b110 4
b110 5
11
1&
1"
#60
b100001100101000 )
b100001100101000 7
b100001100101000 -
b100001100101000 4
b100001100101000 5
b11011001010100001100100001 *
b11011001010100001100100001 6
b100001100100001 ,
b100001100101000 '
b100001100101000 3
b111 (
b111 2
b10000111011001010100001100100001 !
b10000111011001010100001100100001 +
b10000111011001010100001100100001 0
b11000 /
b110 .
0#
#70
1#
#80
b100001100101001 )
b100001100101001 7
b0xxxxxxxxxxxxxxxxxxxxxxxxxx *
b0xxxxxxxxxxxxxxxxxxxxxxxxxx 6
bx ,
b100001100101001 -
b100001100101001 4
b100001100101001 5
bx '
bx 3
b100001100101001 (
b100001100101001 2
bx !
bx +
bx 0
b10000110010100000 /
b100001100101000 .
01
0#
0&
0"
#90
1#
#100
b100001100101010 )
b100001100101010 7
b100001100101010 -
b100001100101010 4
b100001100101010 5
b100001100101010 (
b100001100101010 2
b10000110010100100 /
b100001100101001 .
0#
#110
1#
#120
b100001100101011 )
b100001100101011 7
b100001100101011 -
b100001100101011 4
b100001100101011 5
b100001100101011 (
b100001100101011 2
b10000110010101000 /
b100001100101010 .
0#
#130
1#
#140
b100001100101100 )
b100001100101100 7
b100001100101100 -
b100001100101100 4
b100001100101100 5
b100001100101100 (
b100001100101100 2
b10000110010101100 /
b100001100101011 .
0#
#150
1#
#160
b100001100101101 )
b100001100101101 7
b100001100101101 -
b100001100101101 4
b100001100101101 5
b100001100101101 (
b100001100101101 2
b10000110010110000 /
b100001100101100 .
0#
#170
1#
#179
b0xxxxxxxxxxxxxxxxxxxxxxxxxx )
b0xxxxxxxxxxxxxxxxxxxxxxxxxx 7
1$
#180
bx -
bx 4
bx 5
bx (
bx 2
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 /
b0xxxxxxxxxxxxxxxxxxxxxxxxxx .
0#
#190
1#
#200
bx )
bx 7
0#
0$
#210
1#
#220
bx *
bx 6
bx00 /
bx .
0#
#230
1#
#240
0#
#250
1#
#260
0#
#270
1#
#280
0#
#290
1#
#300
0#
#310
1#
#320
0#
#330
1#
#340
0#
#350
1#
#360
0#
#370
1#
#380
0#
#390
1#
#400
0#
#410
1#
#420
0#
#430
1#
#440
0#
#450
1#
#460
0#
#470
1#
#480
0#
#490
1#
#500
0#
#510
1#
#520
0#
#530
1#
#540
0#
#550
1#
#560
0#
#570
1#
#580
0#
#590
1#
#600
0#
#610
1#
#620
0#
#630
1#
#640
0#
#650
1#
#660
0#
#670
1#
#680
0#
#690
1#
#700
0#
